//// C is structured orinted programming language
//getch() function is need to be used in some c compilers like turbo c. Getch is used to hold the output sceen and wait until user gives any type of input
// getche() method reads a single character from the keyboard and displays immediately on output screen without waiting for enter key. getch is the the function that waits for an input from the user.
//file operation in c
fopen()
fclose()
fgets()
fprint()

// C linkage in c++
#ifdef __cplusplus
extern "C" {
#endif

// all of your legacy C code here

#ifdef __cplusplus
}
#endif

//data types
Basic Datatypes :
Derived Datatypes:
Enumeration Datatypes:
Void Datatypes:

// type casting
int i = 10;
printf("%f\n", (float)i)

// type definition
typedef int AFL_INT;

//macros declaration
#define PI 3.14159265358979F

//pointer variables - variable which indictaes adress where data is stroed
 * indicated value at -- & indicates adress of

// %d - decimal, %i - integer , %u- unsigned interger,  %f float variable,  %c character, %s string %o octal , %x is hexadecimal

// #include <stdio.h> , standard input and ouput header file (printf, scanf)
// #include <conio.h>, console input and output header file (clearsr(), getch() )used mostly in turbo c)

printf("%d\n", x);
scanf("%d", &x);

//!= ( not equal to) , a%b (reminder of the division), && (logical AND) , || (logical OR), & (bitwise AND) , | (bitwise OR)

// Structure - to store multiple data members of different data types
#include <stdio.h>
#include <string.h>

struct books{
    char name[2];
    int book_id;
};

int main()
{
    struct books book1;
    strcpy(book1.name, "aa");
    book1.book_id = 21;
    
   printf( "book1 name : %s\n", book1.name);
   printf( "book1 book_id : %d\n", book1.book_id);

    return 0;
}

//Unions
union b{
   int id;
   char name[2];
};
// struct allocate memeory > (sum of size of all the members)
// union allcocate memory = max(data memebers)


int main()
{
 struct books book1;
 strcpy(book1.name, 'as');
 book1.book_id = 12;
}


// function declaration
float mul(float x, float y);
float mul(float x, float y)
{
    return x*y;
}

//Call by value
Here actual paramters(arguments) copied to formal paramters and these two different parameters stores values in different location

int x = 10, y= 20;
funCalByValue(x,y);
print("%d\t%d\n", x, y)
int funCalByValue(int x1, int x2)
{
   x1 = 20;
   x2 = 10;
}

x = 10, y = 20;


// Call by reference
Here actual and formal paramters refer to same memory location here any chnages made to formal paramters can reflect in actual parameters
here we pass adress instead of value

int x = 10, y= 20;
funCalByRef(&x, &y);
int funCalByRef(int *ptr1, int *ptr2)
{
  *ptr1 = 20;
  *ptr2 = 10;
}

x = 20, y = 10;

// arrays ( data strcture to store similar kind of elements in sequential manner)
int a[5];
int a[5] = {1,2,3,4,5};
int a[] = {1,2,3,4,5};

// multidimensional arrays
int a[3][4] = { {1,2,3,4}, {3,4,5,6}, {2,3,5,5} };

//passing arrays to function

int a[5] = {1,2,3,4,5};
printf("%f\n", avgCalc(c,5));
double avgCalc(int arr[], int size)
{
    int i=0, sum =0;
    for(i=0;i<size;i++)
    {
        sum = sum + arr[i]; 
    }
    return (sum/size);
}

//Static variable (will not vanish at the end of main)
static int x = 10;

int count()
{
    static int i = 10;
    return i++;
}
    printf("%d\n", count());
    printf("%d\n", count());
    10,11  if it normal int then 10, 10


//dynamic memory allocation (calloc, malloc realloc and free)

static memory allocation (allocation at the time compilation) - fixed size cant chnage during program run
//malloc - function reserves a block of memory of the specified number of bytes. And, it returns a pointer of void which can be casted into pointers of any form
#include <stdlib.h>
ptr = (float*)malloc(n*sizeof(float));

//calloc - contiguous allocation - function allocates memory and initializes all bits to zero

ptr = (float*)calloc(n, sizeof(float))
// free - Dynamically allocated memory created with either calloc() or malloc() doesn't get freed on their own. You must explicitly use free() to release the space
free(ptr)

realloc - if the dynamically allocated memory is insufficient or more than required, you can change the size of previously allocated memory using the realloc() function

ptr = realloc(ptr, newSize*sizeof(int))

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int *ptr, i , n1, n2;
    printf("Enter size: ");
    scanf("%d", &n1);

    ptr = (int*) malloc(n1 * sizeof(int));

    printf("Addresses of previously allocated memory: ");
    for(i = 0; i < n1; ++i)
         printf("%u\n",ptr + i);

    printf("\nEnter the new size: ");
    scanf("%d", &n2);

    // rellocating the memory
    ptr = realloc(ptr, n2 * sizeof(int));

    printf("Addresses of newly allocated memory: ");
    for(i = 0; i < n2; ++i)
         printf("%u\n", ptr + i);
  
    free(ptr);

//switch case

#include <stdio.h>

int main()
{
    int operator;
    scanf("%d", &operator);
    switch(operator)
    {
        case '1':
            printf("%d\n", 5);
             break;
        case '2':
            printf("%d\n", 10);
            break;
        default:
           printf("%d\n", 15);
    }

    return 0;
}


// strings
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int i;
    char s[7]= {'a','b', 'r', 'd', 'f', '\0', 'g'};
    //char x[5] = "rtydg";
    //printf("%s\n", s);
    //char name[4];
    //printf("Enter name: ");
    //scanf("%s", name);
    //printf("Your name is %s.\n", name);
    
    printf("%c\n", *(s+1));
    printf("%d\n", strlen(s));
    strcpy(str2, str1);
    result = strcmp(str1, str3);
    return 0;
      
}



/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include <math.h>
float mul(float x, float y);

int main()
{
    int a, *p, x, i;
    float y = 10.0;
    a = 10;
    p = &a;
    int c[10];
    
    for(i=0;i<10:i++)
    {
      c[i] = i;
    }

    
    //printf("Hello World");
    printf("a value is %d\n", a);
    printf("%u\n", p);
    printf("%d\n", *p);
    
    //char ch = 'A';

    //char str[20] = "Animesh";
    
    //float flt = 10.234;
    
    //int no = 150;
    
    //double dbl = 20.123456;
    
    //printf("Character is %c \n", ch);
    
    //printf("String is %s \n" , str);
    
    //printf("Float value is %f \n", flt);
    
    //printf("Integer value is %d\n" , no);
    
    //printf("Double value is %lf \n", dbl);
    
    //printf("Octal value is %o \n", no);
    
    //printf("Hexadecimal value is %x \n", no);
    
    printf("Enter the value of x\n");
    //scanf("%d", &x);
    //printf("%d\n", pow(2,3));
    printf("%d - %d is %d\n", a,a+a, a+2);
    
    printf("%f", mul(2.3, 4.5));
    
    return 0;
}


float mul(float x, float y)
{
    return x*y;
}



