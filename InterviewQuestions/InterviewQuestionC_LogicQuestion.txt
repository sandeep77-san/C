// print 10 random numbers between 1 t0 100
#include <stdio.h>
#include <stdlib.h>

int main()
{
   int i;
   for(i=0;i<5;i++)
   {
        printf("%i\n", (rand()%100));
   }
    return 0;
}

// swap two number without using 3rd number

#include <stdio.h>

int main()
{
   int i =10, j = 20;
   printf("%d %d\n", i,j);
   i = i*j;
   j = i/j;
   i = i/j;
   printf("%d %d\n", i,j);
}

//print a string with % symbol in it ( use %%)

//write the code to print following pattern
1
1 2
1 2 3
1 2 3 4

#include <stdio.h>

int main()
{
   int rows, i,j;
   printf("Number of rows\n");
   scanf("%d", &rows);
   
   for(i=1;i<=rows;i++)
   {
       for(j=1;j<=i;j++)
       {
           printf("%d", j);
       }
    printf("\n");
   }
}

// How to find and remove duplicate in an array

#include <stdio.h>

int main()
{
  int a[10] = {1,2,3,3,5,5,6,7,8,8}, i, j, b[10], c=0;
  int length = sizeof(a)/sizeof(int);
  int ind = 0;
  
  for(i=0;i<length;i++)
  {
      ind = 0;
      for(j=i+1;j<length;j++)
      {
          if(a[i]==a[j])
          {
              ind = 1;
              printf("%d", a[i]);
          }
      }
      
      if(ind == 0)
      {
          b[c]= a[i];
          c = c+1;
      }
  }
  
  for(i=0;i<c;i++)
  {
      printf("\n%d", b[i]);
  }
return 0;

}

//Bubble sort
int main()
{
  int a[6] = {4,5,3,1,2,0},i,j,temp;
  int length = sizeof(a)/sizeof(int);
  
  for(i=0;i<length;i++)
  {
    for(j=1;j<(length-i);j++)
    {
       if(a[j]<a[j-1])
        {
            temp = a[j-1];
            a[j-1] = a[j];
            a[j] = temp;
        }
    }

  }
  for(i=0;i<length;i++)
  {
      printf("%d", a[i]);
  }
      
}

// Data structure - method and technique used to maintain data in organized fashion
// linked list -- Linked List is a sequence of links which contains items. Each link contains a connection to another link. Linked list is the second most-used data structure after array.
// each and individual element is node 
//node1 <--> node2 <---> node3 (linked list)
//A linked list is represented by a pointer to the first node of the linked list. The first node is called the head. If the linked list is empty, then the value of the head is NULL.
Each node in a list consists of at least two parts:
1) data
2) Pointer (Or Reference) to the next node

// create a 3 node linked list

#include <stdio.h> 
#include <stdlib.h> 
  
struct Node { 
    int data; 
    struct Node* next; 
}; 
  
// This function prints contents of linked list starting from 
// the given node 
void printList(struct Node* n) 
{ 
    while (n != NULL) { 
        printf(" %d ", n->data); 
        n = n->next; 
    } 
} 
  
int main() 
{ 
    struct Node* head = NULL; 
    struct Node* second = NULL; 
    struct Node* third = NULL; 
  
    // allocate 3 nodes in the heap 
    head = (struct Node*)malloc(sizeof(struct Node)); 
    second = (struct Node*)malloc(sizeof(struct Node)); 
    third = (struct Node*)malloc(sizeof(struct Node)); 
  
    head->data = 1; // assign data in first node 
    head->next = second; // Link first node with second 
  
    second->data = 2; // assign data to second node 
    second->next = third; 
  
    third->data = 3; // assign data to third node 
    third->next = NULL; 
  
    printList(head); 
  
    return 0; 
}

// linear search time complexicity O(n)
#include <stdio.h> 
  
int search(int arr[], int n, int x) 
{ 
    int i; 
    for (i = 0; i < n; i++) 
        if (arr[i] == x) 
            return i; 
    return -1; 
} 
  
// Driver code 
int main(void) 
{ 
    int arr[] = { 2, 3, 4, 10, 40 }; 
    int x = 10; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    
    // Function call 
    int result = search(arr, n, x); 
    (result == -1) 
        ? printf("Element is not present in array") 
        : printf("Element is present at index %d", result); 
    return 0; 
}

// binary serach on sorted array and time complexcity O(logn) 

#include <stdio.h>
#include <stdlib.h>

int main()
{
   int a[8] = {1,2,5,6,7,9,10,11}, n, mid, start, end;
   int l = sizeof(a)/sizeof(int);
   start = 0;
   end = l-1;
   printf("search number: ");
   scanf("%d", &n);
   while(start<=end)
    {
       mid = (start + end)/2;
       if (a[mid] == n)
       {
         printf("%d\n", mid);
         break;
       }
       else if(a[mid]<n)
       {
           start = mid + 1;
           
       }
       else 
       {
           end = mid -1;
       }
    }


    return 0;
      
}
      
}


