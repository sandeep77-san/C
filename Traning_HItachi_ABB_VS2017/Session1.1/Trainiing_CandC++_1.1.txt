// C programming
C89, C99, C11 (specification documents - what new features, what is removed)

// C and C++ are compiler dependent languages
// scripting - python, Jscript, MATLAB, interprted languauge ( not compiled language)

compilation process:
source code .c and .cpp
1. Preprocessing - preprocessor
  - header file inclusion
  - remove the comments
  - it expands the macros ( blind substitution and it has side effects)
   - conditional compilazation 

2. Compiling  - Compiler
   erros - if ; is missed
3. Assembly - Assembler
4. Linking - Linker 
  extern vriables, functions complied at this stage
- errors: multiple defintions, 
          Undefined reference - when function defintion not found anywhere in above stages

Executable: .exe

$ gcc file.c -E - o file.i

// header files cotains
- declarations 
   extern int x; (like this)
- macro
- structures 
- enums
- no global variables
- any defination shouldnt be inculded 

-glibc.dll (will have definations of printf not in stdio.h)

// Macros
#ifndef MAX
#define MAX 10 // if MAX is not defined earlier it wil l define it
#endif

you cant comment code with '//' but textual decrition can be done as per standard (LOC voilation) 

we can use  
#if 0
---
---
#endif

#ifdef DEBUG
printf();

--

#endif

#ifdef RELEASE
printf();

--

#endif
-------------------------------------
//Macros Drawbacks :
- Macros cant differetiate argument types
- Macros, if logic complex logic becomes lengthy
- Macros, Debugging themis difficult
-----------------------------------
//Question
Project 
MATH operations:
i have ADD(), ADD(a), ADD(a,b), ADD(a,b,c) 
can take 1arg, 2 arg, 3 arg , 0 arg
u can have MAcro 
#define ARG
-------------------------------

"" searches current directory and then std directory
<> seraches only in std directory

-----------------------------------
Data types:
std data types :
char- 1 Byte, ASCII
int- Depends on machine, 4 bytes, Binary format
float- 4 bytes, IEEE 654 single precision floating point ( 1 sign, mantissa :23 bit, exp: 8 bit)
double- 8 bytes, IEEE 654 double precision folating point (1 sign, mantissa = 52 bit, exp : 11 bit)
void - 1 bytes
derived data types: struct, pointers, enums, unions, arrays, typedef
- data type specify - how much memory, what format in which data is stored 
  ex: Char ch = 'S'; 1-byte and ASCII format (ASCII value is 7 bits)

Qualifiers:
const, volatile

Modifiers:
Signed, unsigned, short, long
- bydefault modifer is signed
 - signed number -2^(N-1) to +2^(N-1) -1
 - unsigned number 0 to +2^(N-1) -1
 - intel machine uses ittle indian machine


Storage- class specifers:
auto, extern, register, static

--------------------------------------------------
double d1 = 10.23, d2 = 10.23;
if(d1==d2)
{
}

instead to check equality
if(d1-d2<DOUBLE_MIN)
{
}
-------------------------------------------------------
Logical operators

any integer apart from 0 is TRUE
0 == FALSE
-1 == TRUE
& bitwise and
&& binary and

//Bitwise operator
AND &
OR - |
coplement - ~
XOR - ^
left shift - <<
right shift - >>

#include <stdio.h>

int main()
{
	unsigned char ch1 = 0xAA; // 10101010
	unsigned char ch2 = 0x55; // 01010101

#if 0
	printf("Logical AND: %d\n", ch1&&ch2);
	printf("Bitwise AND: %d\n", ch1&ch2);
	
	// set bit number 4
	printf("%x\n", (ch1 | (1 << 4))); // 10111010 0xBA
#endif

	//set bit4 and bit6 ?
	unsigned char mask_1 = (1 << 4) | (1 << 6); //11111010 - FA
	printf("%x\n", ch1 | mask_1);
	
	// reset bit5
	unsigned char mask_2 = ~(1 << 5);
	printf("%x\n", ch1 & mask_2); // 10001010 - 8A

	// toggle bit5
	unsigned char mask_3 = (1 << 5);
	printf("%x\n", (ch1 ^ mask_3)); // 10001010 - 8A

	while (1);
	return 0;
}


